// lib/utils/sync_user_photo_helper.dart
import 'package:kafex/backend/supabase/supabase.dart';
import 'user_manager.dart';

class SyncUserPhotoHelper {
  /// Sincroniza a foto do UserManager para o banco de dados
  static Future<bool> syncCurrentUserPhoto() async {
    try {
      final userManager = UserManager.instance;
      final userEmail = userManager.userEmail;
      final userName = userManager.userName;
      final userPhoto = userManager.userPhotoUrl;
      
      print('üîÑ Sincronizando foto do usu√°rio...');
      print('   Email: $userEmail');
      print('   Nome: $userName');
      print('   Foto: $userPhoto');
      
      if (userPhoto == null || userPhoto.isEmpty) {
        print('‚ö†Ô∏è Usu√°rio n√£o tem foto para sincronizar');
        return false;
      }
      
      // Verificar se o perfil j√° existe
      final existingUser = await SupaClient.client
          .from('usuario_perfil')
          .select('id, foto_url')
          .eq('email', userEmail)
          .maybeSingle();

      if (existingUser == null) {
        print('üë§ Criando novo perfil com foto...');
        
        // Criar novo perfil
        await SupaClient.client
            .from('usuario_perfil')
            .insert({
              'email': userEmail,
              'nome_exibicao': userName,
              'foto_url': userPhoto,
              'created_at': DateTime.now().toIso8601String(),
            });
        
        print('‚úÖ Novo perfil criado com foto');
        return true;
        
      } else {
        print('üë§ Atualizando perfil existente...');
        
        // Atualizar perfil existente
        await SupaClient.client
            .from('usuario_perfil')
            .update({
              'nome_exibicao': userName,
              'foto_url': userPhoto,
            })
            .eq('email', userEmail);
        
        print('‚úÖ Perfil atualizado com foto');
        return true;
      }
      
    } catch (e) {
      print('‚ùå Erro ao sincronizar foto: $e');
      return false;
    }
  }
  
  /// For√ßa a sincroniza√ß√£o e mostra resultado para debug
  static Future<void> forceSyncWithDebug() async {
    print('\nüöÄ === FOR√áANDO SINCRONIZA√á√ÉO DE FOTO ===');
    
    final userManager = UserManager.instance;
    print('üìä Estado atual do UserManager:');
    print('   Nome: ${userManager.userName}');
    print('   Email: ${userManager.userEmail}');
    print('   Foto: ${userManager.userPhotoUrl}');
    
    final success = await syncCurrentUserPhoto();
    
    if (success) {
      print('üéâ Sincroniza√ß√£o bem-sucedida!');
      print('üí° Pr√≥ximos posts devem mostrar a foto.');
    } else {
      print('üí• Falha na sincroniza√ß√£o.');
      print('üîç Verifique se o usu√°rio tem foto configurada.');
    }
    
    print('=== FIM DA SINCRONIZA√á√ÉO ===\n');
  }
  
  /// Verifica se a foto est√° sincronizada
  static Future<bool> isPhotoSynced() async {
    try {
      final userManager = UserManager.instance;
      final userEmail = userManager.userEmail;
      final userPhoto = userManager.userPhotoUrl;
      
      if (userPhoto == null || userPhoto.isEmpty) {
        return false;
      }
      
      final profile = await SupaClient.client
          .from('usuario_perfil')
          .select('foto_url')
          .eq('email', userEmail)
          .maybeSingle();
      
      final dbPhoto = profile?['foto_url'] as String?;
      
      return dbPhoto == userPhoto;
      
    } catch (e) {
      print('‚ùå Erro ao verificar sincroniza√ß√£o: $e');
      return false;
    }
  }
}