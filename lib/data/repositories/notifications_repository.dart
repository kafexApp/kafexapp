// lib/data/repositories/notifications_repository.dart

import '../models/domain/notification.dart';
import '../../utils/result.dart';
import '../../services/notifications_service.dart';

/// Interface abstrata para reposit√≥rio de notifica√ß√µes
abstract class NotificationsRepository {
  Future<Result<List<AppNotification>>> getNotifications();
  Future<Result<void>> markAsRead(String notificationId);
  Future<Result<void>> markAllAsRead();
  Future<Result<void>> deleteNotification(String notificationId);
}

/// Implementa√ß√£o real do reposit√≥rio de notifica√ß√µes
/// Conecta com o NotificationsService que acessa o Supabase
class NotificationsRepositoryImpl implements NotificationsRepository {
  @override
  Future<Result<List<AppNotification>>> getNotifications() async {
    try {
      print('üîÑ Repository: Buscando notifica√ß√µes...');
      
      // Busca notifica√ß√µes do Supabase atrav√©s do Service
      final notificacoesSupabase = await NotificationsService.getNotifications();

      // Converte dados do Supabase para o modelo de dom√≠nio AppNotification
      final notifications = notificacoesSupabase.map((notifData) {
        return _convertToAppNotification(notifData);
      }).toList();

      print('‚úÖ Repository: ${notifications.length} notifica√ß√µes convertidas');
      return Result.ok(notifications);
    } catch (e) {
      print('‚ùå Repository: Erro ao buscar notifica√ß√µes - $e');
      return Result.error(Exception('Erro ao buscar notifica√ß√µes: $e'));
    }
  }

  @override
  Future<Result<void>> markAsRead(String notificationId) async {
    try {
      print('üîÑ Repository: Marcando notifica√ß√£o $notificationId como lida...');
      
      final success = await NotificationsService.markAsRead(
        int.parse(notificationId),
      );

      if (success) {
        print('‚úÖ Repository: Notifica√ß√£o marcada como lida');
        return Result.ok(null);
      } else {
        return Result.error(Exception('Falha ao marcar notifica√ß√£o como lida'));
      }
    } catch (e) {
      print('‚ùå Repository: Erro ao marcar como lida - $e');
      return Result.error(Exception('Erro ao marcar notifica√ß√£o: $e'));
    }
  }

  @override
  Future<Result<void>> markAllAsRead() async {
    try {
      print('üîÑ Repository: Marcando todas as notifica√ß√µes como lidas...');
      
      final success = await NotificationsService.markAllAsRead();

      if (success) {
        print('‚úÖ Repository: Todas marcadas como lidas');
        return Result.ok(null);
      } else {
        return Result.error(Exception('Falha ao marcar todas como lidas'));
      }
    } catch (e) {
      print('‚ùå Repository: Erro ao marcar todas - $e');
      return Result.error(Exception('Erro ao marcar todas: $e'));
    }
  }

  @override
  Future<Result<void>> deleteNotification(String notificationId) async {
    try {
      print('üîÑ Repository: Deletando notifica√ß√£o $notificationId...');
      
      final success = await NotificationsService.deleteNotification(
        int.parse(notificationId),
      );

      if (success) {
        print('‚úÖ Repository: Notifica√ß√£o deletada');
        return Result.ok(null);
      } else {
        return Result.error(Exception('Falha ao deletar notifica√ß√£o'));
      }
    } catch (e) {
      print('‚ùå Repository: Erro ao deletar - $e');
      return Result.error(Exception('Erro ao deletar notifica√ß√£o: $e'));
    }
  }

  /// Converte dados do Supabase para o modelo de dom√≠nio AppNotification
  AppNotification _convertToAppNotification(Map<String, dynamic> data) {
    // Determinar o tipo de notifica√ß√£o baseado no campo 'tipo'
    NotificationType type = _mapTipoToNotificationType(data['tipo']);

    // Determinar se est√° lida (visivel = false significa lida)
    bool isRead = !(data['visivel'] ?? true);

    // Criar t√≠tulo e mensagem baseados no tipo
    final titleAndMessage = _generateTitleAndMessage(data);

    return AppNotification(
      id: data['id'].toString(),
      type: type,
      title: titleAndMessage['title']!,
      message: titleAndMessage['message']!,
      time: DateTime.parse(data['created_at']),
      isRead: isRead,
      icon: null,
      actionUrl: null,
    );
  }

  /// Mapeia o tipo do banco para o enum NotificationType
  NotificationType _mapTipoToNotificationType(String? tipo) {
    switch (tipo) {
      case 'curtida_post':
        return NotificationType.review; // Usando review para curtidas
      case 'comentario_post':
        return NotificationType.community; // Usando community para coment√°rios
      case 'avaliacao_cafeteria':
        return NotificationType.newPlace; // Usando newPlace para avalia√ß√µes
      case 'teste':
        return NotificationType.appUpdate; // Usando appUpdate para testes
      default:
        return NotificationType.community;
    }
  }

  /// Gera t√≠tulo e mensagem baseados no tipo de notifica√ß√£o
  Map<String, String> _generateTitleAndMessage(Map<String, dynamic> data) {
    final tipo = data['tipo'] as String?;

    switch (tipo) {
      case 'curtida_post':
        return {
          'title': 'Curtida no seu post! ‚ù§Ô∏è',
          'message': 'Algu√©m curtiu seu post no feed.',
        };
      
      case 'comentario_post':
        final previa = data['previa_comentario'] as String?;
        return {
          'title': 'Novo coment√°rio üí¨',
          'message': previa ?? 'Algu√©m comentou no seu post.',
        };
      
      case 'avaliacao_cafeteria':
        return {
          'title': 'Nova avalia√ß√£o ‚≠ê',
          'message': 'Sua cafeteria recebeu uma nova avalia√ß√£o!',
        };
      
      case 'teste':
        final previa = data['previa_comentario'] as String?;
        return {
          'title': 'Notifica√ß√£o de Teste',
          'message': previa ?? 'Esta √© uma notifica√ß√£o de teste.',
        };
      
      default:
        return {
          'title': 'Nova notifica√ß√£o',
          'message': data['previa_comentario'] ?? 'Voc√™ tem uma nova notifica√ß√£o.',
        };
    }
  }
}