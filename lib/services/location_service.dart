import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import '../models/user_location.dart';

class LocationService {
  static LocationService? _instance;
  static LocationService get instance => _instance ??= LocationService._();
  LocationService._();

  Future<UserLocation?> getCurrentLocation() async {
    try {
      print('üîç Iniciando solicita√ß√£o de localiza√ß√£o...');
      
      // Verifica se o servi√ßo de localiza√ß√£o est√° habilitado
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('‚ùå Servi√ßos de localiza√ß√£o desabilitados');
        return null;
      }

      // Verifica permiss√µes
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        print('üîê Solicitando permiss√£o de localiza√ß√£o...');
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print('‚ùå Permiss√£o negada pelo usu√°rio');
          return null;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print('‚ùå Permiss√£o negada permanentemente');
        return null;
      }

      print('‚úÖ Permiss√£o concedida, obtendo posi√ß√£o...');

      // Primeiro tenta pegar a √∫ltima localiza√ß√£o conhecida (mais r√°pido)
      Position? position;
      try {
        position = await Geolocator.getLastKnownPosition();
        if (position != null) {
          print('üìç Usando √∫ltima localiza√ß√£o conhecida: ${position.latitude}, ${position.longitude}');
        }
      } catch (e) {
        print('‚ö†Ô∏è √öltima localiza√ß√£o n√£o dispon√≠vel');
      }

      // Se n√£o tiver √∫ltima localiza√ß√£o, obt√©m posi√ß√£o atual
      if (position == null) {
        print('üîÑ Obtendo posi√ß√£o atual...');
        position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.medium,
          timeLimit: Duration(seconds: 30),
        ).timeout(
          Duration(seconds: 30),
          onTimeout: () {
            print('‚è±Ô∏è Timeout na obten√ß√£o de localiza√ß√£o');
            throw TimeoutException('Timeout ao obter localiza√ß√£o');
          },
        );
      }

      print('üìç Coordenadas obtidas: ${position.latitude}, ${position.longitude}');

      // Tenta converter coordenadas em endere√ßo (sem bloquear)
      String city = 'S√£o Paulo';
      String state = 'SP';
      String country = 'Brasil';
      String address = 'Localiza√ß√£o atual';

      // Faz o geocoding de forma ass√≠ncrona, mas n√£o aguarda para n√£o bloquear
      _getAddressAsync(position.latitude, position.longitude).then((placemark) {
        if (placemark != null) {
          print('üè† Endere√ßo obtido: ${placemark.locality}, ${placemark.administrativeArea}');
        }
      });

      final userLocation = UserLocation(
        latitude: position.latitude,
        longitude: position.longitude,
        city: city,
        state: state,
        country: country,
        address: address,
      );

      print('‚úÖ Localiza√ß√£o configurada: ${userLocation.displayLocation}');
      return userLocation;
      
    } on TimeoutException {
      print('‚ùå Timeout ao obter localiza√ß√£o');
      return null;
    } catch (e) {
      print('‚ùå Erro ao obter localiza√ß√£o: $e');
      return null;
    }
  }

  // M√©todo auxiliar para geocoding ass√≠ncrono
  Future<Placemark?> _getAddressAsync(double lat, double lng) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(lat, lng)
          .timeout(Duration(seconds: 5));

      if (placemarks.isNotEmpty) {
        return placemarks.first;
      }
      return null;
    } catch (e) {
      print('‚ö†Ô∏è Geocoding indispon√≠vel: $e');
      return null;
    }
  }

  double calculateDistance(
    double lat1, double lon1,
    double lat2, double lon2,
  ) {
    return Geolocator.distanceBetween(lat1, lon1, lat2, lon2);
  }
}

class TimeoutException implements Exception {
  final String message;
  TimeoutException(this.message);

  @override
  String toString() => message;
}