// lib/services/notifications_service.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Servi√ßo para gerenciar notifica√ß√µes no Supabase
class NotificationsService {
  static final SupabaseClient _supabase = Supabase.instance.client;

  /// Obt√©m o Firebase UID do usu√°rio atual
  static String? _getCurrentFirebaseUid() {
    return FirebaseAuth.instance.currentUser?.uid;
  }

  /// Busca o user_id do Supabase a partir do Firebase UID
  static Future<int?> _getUserIdFromFirebaseUid(String firebaseUid) async {
    try {
      final response = await _supabase
          .from('usuario_perfil')
          .select('id')
          .eq('ref', firebaseUid)
          .maybeSingle();

      if (response != null) {
        return response['id'] as int;
      }
      return null;
    } catch (e) {
      print('‚ùå Erro ao buscar user_id: $e');
      return null;
    }
  }

  /// Busca todas as notifica√ß√µes do usu√°rio atual (vis√≠veis e invis√≠veis)
  /// Retorna as notifica√ß√µes ordenadas por data (mais recentes primeiro)
  static Future<List<Map<String, dynamic>>> getNotifications() async {
    try {
      final firebaseUid = _getCurrentFirebaseUid();
      if (firebaseUid == null) {
        print('‚ùå Usu√°rio n√£o autenticado');
        return [];
      }

      print('üîç Buscando notifica√ß√µes para o usu√°rio: $firebaseUid');

      // Buscar todas as notifica√ß√µes do usu√°rio
      final response = await _supabase
          .from('notificacao')
          .select()
          .eq('user_notificado_ref', firebaseUid)
          .order('created_at', ascending: false);

      print('‚úÖ ${response.length} notifica√ß√µes encontradas');
      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      print('‚ùå Erro ao buscar notifica√ß√µes: $e');
      return [];
    }
  }

  /// Busca apenas notifica√ß√µes n√£o lidas (vis√≠vel = true) do usu√°rio atual
  static Future<List<Map<String, dynamic>>> getUnreadNotifications() async {
    try {
      final firebaseUid = _getCurrentFirebaseUid();
      if (firebaseUid == null) {
        print('‚ùå Usu√°rio n√£o autenticado');
        return [];
      }

      // visivel = true significa "n√£o lida"
      final response = await _supabase
          .from('notificacao')
          .select()
          .eq('user_notificado_ref', firebaseUid)
          .eq('visivel', true)
          .order('created_at', ascending: false);

      return List<Map<String, dynamic>>.from(response);
    } catch (e) {
      print('‚ùå Erro ao buscar notifica√ß√µes n√£o lidas: $e');
      return [];
    }
  }

  /// Conta quantas notifica√ß√µes n√£o lidas (vis√≠vel = true) o usu√°rio tem
  static Future<int> getUnreadNotificationsCount() async {
    try {
      final firebaseUid = _getCurrentFirebaseUid();
      if (firebaseUid == null) return 0;

      final response = await _supabase
          .from('notificacao')
          .select()
          .eq('user_notificado_ref', firebaseUid)
          .eq('visivel', true)
          .count();

      return response.count;
    } catch (e) {
      print('‚ùå Erro ao contar notifica√ß√µes n√£o lidas: $e');
      return 0;
    }
  }

  /// Marca uma notifica√ß√£o espec√≠fica como lida (visivel = false)
  static Future<bool> markAsRead(int notificationId) async {
    try {
      await _supabase
          .from('notificacao')
          .update({'visivel': false})
          .eq('id', notificationId);

      print('‚úÖ Notifica√ß√£o $notificationId marcada como lida');
      return true;
    } catch (e) {
      print('‚ùå Erro ao marcar notifica√ß√£o como lida: $e');
      return false;
    }
  }

  /// Marca todas as notifica√ß√µes do usu√°rio como lidas (visivel = false)
  static Future<bool> markAllAsRead() async {
    try {
      final firebaseUid = _getCurrentFirebaseUid();
      if (firebaseUid == null) {
        print('‚ùå Usu√°rio n√£o autenticado');
        return false;
      }

      await _supabase
          .from('notificacao')
          .update({'visivel': false})
          .eq('user_notificado_ref', firebaseUid);

      print('‚úÖ Todas as notifica√ß√µes marcadas como lidas');
      return true;
    } catch (e) {
      print('‚ùå Erro ao marcar todas como lidas: $e');
      return false;
    }
  }

  /// Deleta uma notifica√ß√£o permanentemente do banco
  static Future<bool> deleteNotification(int notificationId) async {
    try {
      await _supabase
          .from('notificacao')
          .delete()
          .eq('id', notificationId);

      print('‚úÖ Notifica√ß√£o $notificationId deletada permanentemente');
      return true;
    } catch (e) {
      print('‚ùå Erro ao deletar notifica√ß√£o: $e');
      return false;
    }
  }

  /// Cria uma nova notifica√ß√£o
  /// 
  /// Par√¢metros:
  /// - [tipo]: Tipo da notifica√ß√£o (ex: 'curtida_post', 'comentario_post', 'avaliacao_cafeteria')
  /// - [usuarioNotificadoRef]: Firebase UID do usu√°rio que receber√° a notifica√ß√£o
  /// - [feedId]: ID do post relacionado (opcional)
  /// - [comentarioId]: ID do coment√°rio relacionado (opcional)
  /// - [cafeteriaId]: ID da cafeteria relacionada (opcional)
  /// - [previaComentario]: Pr√©via do coment√°rio (opcional)
  static Future<bool> createNotification({
    required String tipo,
    required String usuarioNotificadoRef,
    int? feedId,
    int? comentarioId,
    int? cafeteriaId,
    String? previaComentario,
  }) async {
    try {
      print('üì¨ Criando notifica√ß√£o do tipo: $tipo');

      // Buscar o user_id do usu√°rio notificado
      final usuarioNotificadoId = await _getUserIdFromFirebaseUid(usuarioNotificadoRef);
      if (usuarioNotificadoId == null) {
        print('‚ùå Usu√°rio notificado n√£o encontrado no banco');
        return false;
      }

      final notificationData = {
        'tipo': tipo,
        'usuario_notificado_id': usuarioNotificadoId,
        'user_notificado_ref': usuarioNotificadoRef,
        'feed_id': feedId,
        'comentario_id': comentarioId,
        'cafeteria_id': cafeteriaId,
        'previa_comentario': previaComentario,
        'visivel': true, // true = n√£o lida, false = lida
        'created_at': DateTime.now().toIso8601String(),
      };

      await _supabase.from('notificacao').insert(notificationData);

      print('‚úÖ Notifica√ß√£o criada com sucesso');
      return true;
    } catch (e) {
      print('‚ùå Erro ao criar notifica√ß√£o: $e');
      return false;
    }
  }

  /// Cria notifica√ß√£o quando algu√©m curte um post
  static Future<bool> notifyPostLike({
    required int feedId,
    required String postOwnerFirebaseUid,
  }) async {
    // N√£o notificar se o usu√°rio curtiu seu pr√≥prio post
    final currentUserUid = _getCurrentFirebaseUid();
    if (currentUserUid == postOwnerFirebaseUid) {
      print('‚ö†Ô∏è Usu√°rio curtiu pr√≥prio post, n√£o notificar');
      return false;
    }

    return await createNotification(
      tipo: 'curtida_post',
      usuarioNotificadoRef: postOwnerFirebaseUid,
      feedId: feedId,
    );
  }

  /// Cria notifica√ß√£o quando algu√©m comenta em um post
  static Future<bool> notifyPostComment({
    required int feedId,
    required int comentarioId,
    required String postOwnerFirebaseUid,
    String? comentarioPreview,
  }) async {
    // N√£o notificar se o usu√°rio comentou no pr√≥prio post
    final currentUserUid = _getCurrentFirebaseUid();
    if (currentUserUid == postOwnerFirebaseUid) {
      print('‚ö†Ô∏è Usu√°rio comentou no pr√≥prio post, n√£o notificar');
      return false;
    }

    return await createNotification(
      tipo: 'comentario_post',
      usuarioNotificadoRef: postOwnerFirebaseUid,
      feedId: feedId,
      comentarioId: comentarioId,
      previaComentario: comentarioPreview,
    );
  }

  /// Cria notifica√ß√£o quando algu√©m avalia uma cafeteria
  static Future<bool> notifyCafeReview({
    required int cafeteriaId,
    required String cafeOwnerFirebaseUid,
    int? avaliacaoId,
  }) async {
    // N√£o notificar se o usu√°rio avaliou sua pr√≥pria cafeteria
    final currentUserUid = _getCurrentFirebaseUid();
    if (currentUserUid == cafeOwnerFirebaseUid) {
      print('‚ö†Ô∏è Usu√°rio avaliou pr√≥pria cafeteria, n√£o notificar');
      return false;
    }

    return await createNotification(
      tipo: 'avaliacao_cafeteria',
      usuarioNotificadoRef: cafeOwnerFirebaseUid,
      cafeteriaId: cafeteriaId,
    );
  }
}