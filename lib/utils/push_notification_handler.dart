// lib/utils/push_notification_handler.dart

import 'package:flutter/material.dart';
import '../models/push_notification_model.dart';
import '../data/repositories/push_notification_repository.dart';

/// Handler para gerenciar push notifications e navega√ß√£o
class PushNotificationHandler {
  final PushNotificationRepository _repository;
  final GlobalKey<NavigatorState> navigatorKey;

  PushNotificationHandler({
    required PushNotificationRepository repository,
    required this.navigatorKey,
  }) : _repository = repository;

  /// Inicializa o handler de push notifications
  Future<void> initialize() async {
    print('üîî Inicializando PushNotificationHandler...');

    await _repository.initialize(
      onNotificationTap: _handleNotificationTap,
    );

    print('‚úÖ PushNotificationHandler inicializado!');
  }

  /// Callback quando usu√°rio clica em uma push notification
  void _handleNotificationTap(PushNotificationModel notification) {
    print('üëÜ Processando clique na push notification');
    print('A√ß√£o: ${notification.action.type}');
    print('Valor: ${notification.action.value}');

    final context = navigatorKey.currentContext;
    if (context == null) {
      print('‚ùå Contexto n√£o dispon√≠vel para navega√ß√£o');
      return;
    }

    // Executar a√ß√£o baseada no tipo
    switch (notification.action.type) {
      case PushNotificationActionType.none:
        print('‚ÑπÔ∏è Nenhuma a√ß√£o definida');
        break;

      case PushNotificationActionType.openPost:
        _navigateToPost(context, notification.action.value);
        break;

      case PushNotificationActionType.openCafeteria:
        _navigateToCafeteria(context, notification.action.value);
        break;

      case PushNotificationActionType.openUrl:
        _openUrl(notification.action.value);
        break;

      case PushNotificationActionType.openScreen:
        _navigateToScreen(context, notification.action.value);
        break;
    }
  }

  /// Navega para um post espec√≠fico
  void _navigateToPost(BuildContext context, String? postId) {
    if (postId == null) {
      print('‚ùå ID do post n√£o fornecido');
      return;
    }

    print('üìç Navegando para post: $postId');

    // TODO: Implementar navega√ß√£o para o post
    // Exemplo: Navigator.pushNamed(context, '/post', arguments: postId);
    
    // Por enquanto, apenas log
    print('‚ö†Ô∏è Navega√ß√£o para post ainda n√£o implementada');
  }

  /// Navega para detalhes de uma cafeteria
  void _navigateToCafeteria(BuildContext context, String? cafeteriaId) {
    if (cafeteriaId == null) {
      print('‚ùå ID da cafeteria n√£o fornecido');
      return;
    }

    print('üìç Navegando para cafeteria: $cafeteriaId');

    // TODO: Implementar navega√ß√£o para cafeteria
    // Exemplo: Navigator.pushNamed(context, '/cafe-detail', arguments: cafeteriaId);
    
    // Por enquanto, apenas log
    print('‚ö†Ô∏è Navega√ß√£o para cafeteria ainda n√£o implementada');
  }

  /// Abre uma URL externa
  void _openUrl(String? url) {
    if (url == null) {
      print('‚ùå URL n√£o fornecida');
      return;
    }

    print('üåê Abrindo URL: $url');

    // TODO: Implementar abertura de URL
    // Exemplo: launchUrl(Uri.parse(url));
    
    // Por enquanto, apenas log
    print('‚ö†Ô∏è Abertura de URL ainda n√£o implementada');
  }

  /// Navega para uma tela espec√≠fica do app
  void _navigateToScreen(BuildContext context, String? screenName) {
    if (screenName == null) {
      print('‚ùå Nome da tela n√£o fornecido');
      return;
    }

    print('üìç Navegando para tela: $screenName');

    // TODO: Implementar navega√ß√£o para telas
    // Exemplo:
    // switch (screenName) {
    //   case 'explorador':
    //     Navigator.pushNamed(context, '/explorador');
    //     break;
    //   case 'perfil':
    //     Navigator.pushNamed(context, '/perfil');
    //     break;
    // }
    
    // Por enquanto, apenas log
    print('‚ö†Ô∏è Navega√ß√£o para tela ainda n√£o implementada');
  }

  /// Desativa token (usado no logout)
  Future<void> deactivateToken() async {
    await _repository.deactivateToken();
  }

  /// Deleta token (usado ao desinstalar)
  Future<void> deleteToken() async {
    await _repository.deleteToken();
  }
}