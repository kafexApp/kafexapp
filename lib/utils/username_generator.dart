// lib/utils/username_generator.dart

import '../backend/supabase/supabase.dart';

class UsernameGenerator {
  static final _supabase = SupaClient.client;

  /// Gera um username √∫nico baseado no nome do usu√°rio
  /// Retorna um username v√°lido e dispon√≠vel no Supabase
  static Future<String> generateUniqueUsername(String fullName) async {
    try {
      // 1. Sanitizar e gerar username base
      String baseUsername = _sanitizeName(fullName);
      
      if (baseUsername.isEmpty) {
        baseUsername = 'usuario';
      }

      print('üîç Gerando username a partir de: $fullName -> $baseUsername');

      // 2. Verificar se o username base est√° dispon√≠vel
      bool isAvailable = await _checkUsernameAvailability(baseUsername);
      
      if (isAvailable) {
        print('‚úÖ Username dispon√≠vel: $baseUsername');
        return baseUsername;
      }

      // 3. Se n√£o estiver dispon√≠vel, adicionar n√∫meros sequenciais
      String finalUsername = await _generateWithNumber(baseUsername);
      print('‚úÖ Username gerado com sucesso: $finalUsername');
      
      return finalUsername;
    } catch (e) {
      print('‚ùå Erro ao gerar username: $e');
      // Fallback: gerar username aleat√≥rio
      return _generateRandomUsername();
    }
  }

  /// Sanitiza o nome removendo caracteres especiais e espa√ßos
  static String _sanitizeName(String name) {
    // Remover acentos e caracteres especiais
    String sanitized = name.toLowerCase().trim();
    
    // Mapa de caracteres acentuados para n√£o acentuados
    const Map<String, String> accentMap = {
      '√°': 'a', '√†': 'a', '√£': 'a', '√¢': 'a', '√§': 'a',
      '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
      '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
      '√≥': 'o', '√≤': 'o', '√µ': 'o', '√¥': 'o', '√∂': 'o',
      '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
      '√ß': 'c', '√±': 'n',
    };

    accentMap.forEach((key, value) {
      sanitized = sanitized.replaceAll(key, value);
    });

    // Remover espa√ßos e caracteres especiais, manter apenas letras e n√∫meros
    sanitized = sanitized.replaceAll(RegExp(r'[^a-z0-9]'), '');

    // Pegar apenas o primeiro nome se tiver m√∫ltiplas palavras
    if (sanitized.length > 15) {
      sanitized = sanitized.substring(0, 15);
    }

    return sanitized;
  }

  /// Verifica se o username est√° dispon√≠vel no Supabase
  static Future<bool> _checkUsernameAvailability(String username) async {
    try {
      final response = await _supabase
          .from('usuario_perfil')
          .select('nome_usuario')
          .eq('nome_usuario', username)
          .maybeSingle();

      // Se n√£o encontrou nenhum registro, o username est√° dispon√≠vel
      return response == null;
    } catch (e) {
      print('‚ùå Erro ao verificar disponibilidade do username: $e');
      return false;
    }
  }

  /// Gera username com n√∫mero sequencial at√© encontrar um dispon√≠vel
  static Future<String> _generateWithNumber(String baseUsername) async {
    int counter = 1;
    String candidateUsername = baseUsername;

    // Tentar at√© 100 varia√ß√µes
    while (counter <= 100) {
      candidateUsername = '$baseUsername$counter';
      
      bool isAvailable = await _checkUsernameAvailability(candidateUsername);
      
      if (isAvailable) {
        return candidateUsername;
      }
      
      counter++;
    }

    // Se n√£o encontrou em 100 tentativas, gerar username aleat√≥rio
    return _generateRandomUsername();
  }

  /// Gera um username aleat√≥rio como √∫ltimo recurso
  static String _generateRandomUsername() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return 'usuario_$timestamp';
  }

  /// Valida se um username tem formato v√°lido
  static bool isValidUsername(String username) {
    // Username deve ter entre 3 e 20 caracteres
    if (username.length < 3 || username.length > 20) {
      return false;
    }

    // Deve conter apenas letras min√∫sculas, n√∫meros e underscore
    final validFormat = RegExp(r'^[a-z0-9_]+$');
    if (!validFormat.hasMatch(username)) {
      return false;
    }

    // N√£o pode come√ßar com n√∫mero
    if (RegExp(r'^[0-9]').hasMatch(username)) {
      return false;
    }

    return true;
  }

  /// Sugere usernames alternativos baseados no nome
  static Future<List<String>> suggestAlternativeUsernames(String fullName) async {
    List<String> suggestions = [];
    String baseName = _sanitizeName(fullName);

    try {
      // Sugest√£o 1: Nome completo sanitizado
      if (baseName.isNotEmpty && await _checkUsernameAvailability(baseName)) {
        suggestions.add(baseName);
      }

      // Sugest√£o 2: Nome + n√∫mero aleat√≥rio
      final random = DateTime.now().millisecondsSinceEpoch % 1000;
      String suggestion2 = '$baseName$random';
      if (await _checkUsernameAvailability(suggestion2)) {
        suggestions.add(suggestion2);
      }

      // Sugest√£o 3: Nome + "kafex"
      String suggestion3 = '${baseName}kafex';
      if (await _checkUsernameAvailability(suggestion3)) {
        suggestions.add(suggestion3);
      }

      // Sugest√£o 4: Primeiras letras + n√∫mero
      if (baseName.length >= 3) {
        String suggestion4 = '${baseName.substring(0, 3)}${random}';
        if (await _checkUsernameAvailability(suggestion4)) {
          suggestions.add(suggestion4);
        }
      }

      return suggestions.take(3).toList(); // Retornar no m√°ximo 3 sugest√µes
    } catch (e) {
      print('‚ùå Erro ao gerar sugest√µes: $e');
      return suggestions;
    }
  }
}